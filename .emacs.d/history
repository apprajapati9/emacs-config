;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(coding-system-history input-method-history search-ring xref--read-pattern-history xref--read-identifier-history tmm--history eww-prompt-history read-char-history read-expression-history goto-line-history c-set-style-history shell-command-history minibuffer-history-search-history regexp-history read-from-kill-ring-history string-rectangle-history query-replace-history minibuffer-history command-history dired-shell-command-history file-name-history read-number-history gud-gdb-history ido-buffer-history yes-or-no-p-history compile-history ido-file-history extended-command-history))
(setq coding-system-history '("utf-8"))
(setq search-ring '(#("delete " 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("expand-region" 0 13 (isearch-case-fold-search t isearch-regexp-function nil)) #("electric" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("astyle" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("ido" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("dired" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("yasnippe" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("clippers" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("thunders" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("pelicans" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("sort" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("cout" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("size" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("print" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("current buffer" 0 14 (isearch-case-fold-search t isearch-regexp-function nil)) #("spurs" 0 5 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq tmm--history '("h==>Help" "p==>Python" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq eww-prompt-history '("mergeSort"))
(setq goto-line-history '("16"))
(setq shell-command-history '("C:/Program Files/Git/bin/bash.exe" "c:/Program /" "c:/Program" "ssh-add" "bash.exe " "C:/Program Files/Emacs/emacs-29.3_2/libexec/emacs/29.3/x86_64-w64-mingw32/cmdproxy.exe"))
(setq regexp-history '("appendNode"))
(setq string-rectangle-history '("0" "vec" "mVector" "size" "arr[" "size1" "arr[" " " "->" "next_node" "222" "12" "1"))
(setq query-replace-history '("mapp" #("mMap" 0 4 (isearch-case-fold-search nil isearch-regexp-function nil)) "mMap" #("mMap" 0 4 (isearch-case-fold-search nil isearch-regexp-function nil)) "mapp" #("mMap" 0 4 (isearch-case-fold-search nil isearch-regexp-function nil)) "6" "1" #("end" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) "arr" "arr" "ajay" "appendNode" "Ajay" #("Node" 0 4 (isearch-case-fold-search nil isearch-regexp-function nil)) "Ajay" #("Node" 0 4 (isearch-case-fold-search nil isearch-regexp-function nil)) "list2" "list" "->" "->" "right" "rightPointer" "left" "leftPointer"))
(setq minibuffer-history '("yes" "mc/mark-next-like-this" "Int" "int" "heights" "vec" "M" "p" "]" "[" "yes" "no" "merge" "yes" "no" "this" "no" "yes" "cout" "#" "ajay" "global" "num1" "a,b" "while"))
(setq command-history '((delete-selection-mode 'toggle) (execute-extended-command nil "delete-selection-mode" "delete-selection-mode") (delete-selection-mode 'toggle) (execute-extended-command nil "delete-selection-mode" "delete-selection-mo") (kill-buffer "Notes.txt") (expand-region-abbrevs (region-beginning) (region-end) nil) (execute-extended-command nil "expand-region-abbrevs" "expand-region") (list-packages nil) (execute-extended-command nil "list-packages" "list-pack") (expand-region-abbrevs (region-beginning) (region-end) nil) (execute-extended-command nil "expand-region-abbrevs" "expand-region") (expand-region-abbrevs (region-beginning) (region-end) nil) (execute-extended-command nil "expand-region-abbrevs" "expand-region") (execute-extended-command nil "expand-region-abbrevs" "expand-re") (dired "D:/") (kill-buffer "cpp-hello_world_start") (dired "d:/git_projects/algorithms/CPlusPlus/C++/algorithms/merget_sort/") (dired "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/") (kill-buffer "*compilation*") (eshell nil) (execute-extended-command nil "eshell" "eshell") (dired "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/") (find-file "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/urls.txt") (compile "python open-urls.py " nil) (find-file "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/open-urls" t)))
(setq dired-shell-command-history '("~/" "./headers/"))
(setq file-name-history '("d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/urls.txt" "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/open-urls.py" "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/open-urls" "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/files" "d:/git_projects/algorithms/CPlusPlus/C++/Leetcode/sort/quick-sort/" "d:/git_projects/algorithms/CPlusPlus/C++/Leetcode/sort/merge-sort/merger.cpp" "d:/git_projects/algorithms/CPlusPlus/C++/Leetcode/sort/merge-sort/merge_sort.cpp" "d:/git_projects/algorithms/CPlusPlus/C++/Leetcode/sort/insertion-sort/insertion-sort.cpp" "d:/git_projects/algorithms/CPlusPlus/C++/Leetcode/sort/bubble-sort/bubble-sort.cpp" "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/files/teams" "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files/files" "d:/git_projects/algorithms/python/PySolutions/read-write-xls-files" "d:/git_projects/algorithms/python/PySolutions/read-write-csv-files/xls-file-reader.py" "d:/git_projects/algorithms/python/PySolutions/async-in-python/basic-async-example.py" "d:/emacs_settings/.emacs.d/snippets/simpc-mode/comment" "d:/emacs_settings/.emacs.d/snippets/simpc-mode/cpp-hello_world_start" "d:/git_projects/algorithms/CPlusPlus/C++/Leetcode/max-water-container/max-water-container.cpp" "d:/emacs_settings/.gitignore" "d:/emacs_settings/.emacs.d/snippets/python-mode/class" "d:/emacs_settings/.emacs.d/snippets/python-mode/pf" "d:/emacs_settings/.emacs.d/snippets/python-mode/p" "d:/emacs_settings/.emacs.d/snippets/python-mode/pprint" "d:/emacs_settings/.emacs.d/snippets/python-mode/zip" "~/.emacs.d/snippets/python-mode/while" "~/.emacs.d/snippets/python-mode/def"))
(setq gud-gdb-history '("gdb -i=mi o" "gdb -i=mi o.out" "gdb -i=mi a.out" "gdb -i=mi merge-linked-list.exe"))
(setq ido-buffer-history '("Notes.txt" "cpp-hello_world_start" "*compilation*" "quick-sort<sort>" "teams" "files" "xls-file-reader.py" "read-write-xls-files" "*compilation*" "quick-sort" "quick_sort.cpp" "*scratch*" "*Messages*" "merge_sort.cpp" "merge-sort.cpp" "*compilation*" "*shell*" "*eshell*" "cpp-hello_world_start" "*eshell*" "p" "*Messages*" "*scratch*" "Notes.txt" "*compilation*"))
(setq yes-or-no-p-history '("yes" "no" "yes" "no" "yes" "YES" "yes" "tes" "yes" "no" "yes" "y" "yes" "no" "yes" "no" "yes" "no" "yes" "ye" "yes"))
(setq compile-history '("python open-urls.py " "chmod 777 quick_sort.cpp " "g++ merge_sort.cpp -o m && ./m" "g++ merger.cpp -o b && ./b" "g++ merger.cpp -o b && b" "g++ selection_sort.cpp -o b && ./b" "g++ selection_sort.cpp -o b && b" "g++ selection_sort.cpp -o b && .\\b" "g++ selection_sort.cpp -o b && b" "g++ selection-sort.cpp -o b && b" "g++ insertion-sort.cpp -o b && b" "g++ bubble-sort.cpp -o b && b" "python xls-file-reader.py " "pip install bs4" "python xls-file-reader.py " "pip install xlrd" "python xls-file-reader.py " "pip install pandas openpyxl" "pip list" "python xls-file-reader.py " "python basic-async-example.py " "g++ max-water-container.cpp -o m && m" "g++ max-water-container.cpp -o m" "python python-basics.py" "python merge-sort.py"))
(setq ido-file-history '("." "urls.txt" nil "." "quick-sort" "." nil "." "merge_sort.cpp" "." "insertion-sort.cpp" "insertion-sort" "." "bubble-sort.cpp" "bubble-sort" "." "players" "teams" "." "files" "." "xls-file-reader.py" "read-write-csv-files" "." "basic-async-example.py"))
(setq extended-command-history '("delete-selection-mode" "expand-region-abbrevs" "list-packages" "expand-region-abbrevs" "eshell" "compile" "shell" "simpc-mode" "bash-ts-mode" "term" "shell" "simpc-mode" "bash-ts-mode" "eshell" "compile" "eshell" "compile" "eshell" "compile" "mc/mark-next-like-this" "eshell" "compile" "eshell" "delete-pair" "compile"))
